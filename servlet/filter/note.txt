Filter对请求进行拦截：
	当客户端发生请求后，在HttpServletRequest 到达Servlet 之前，过滤器拦截客户的HttpServletRequest 
	根据需要检查HttpServletRequest,也可以修改HttpServletRequest头和数据。 
	在过滤器中调用doFilter方法,对请求放行。请求到达Servlet后,对请求进行处理并产生HttpServletResponse发送给客户端。
	在HttpServletResponse 到达客户端之前，过滤器拦截HttpServletResponse 。 
	根据需要检查HttpServletResponse ，可以修改HttpServletResponse 头和数据。
	最后，HttpServletResponse到达客户端。

	System.out.println("我是FilterDemo1，客户端向Servlet发送的请求被我拦截到了");
    //对请求放行，进入下一个过滤器FilterDemo2
    chain.doFilter(request, response);
    System.out.println("我是FilterDemo1，Servlet向客户端发送的响应被我拦截到了");

	FilterChain：过滤链，即一组过滤器，当一个filter收到请求的时候,调用chain.doFilter才可以访问下一			个匹配的filter,若当前的filter是最后一个filter,调用chain.doFilter才能访问目标资源，
				多个filter的执行顺序是由web.xml中filter-mapping的位置决定的，最后一个filter必须得有chain.doFilter(request,response),否则请求无法到达