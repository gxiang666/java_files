SSM笔记：
<<<<<<< HEAD
	实现AJAX请求的controller返回json的两种方法：
	@ResponseBody
	@RequestMapping("AjaxQueryDemoAction")
	public List<AdminInfoBean> ajaxQueryDemo(AdminInfoBean adminB) {
		// 调用service层进行查询操作
		List<AdminInfoBean> lstAdmins = loginS.queryInfoByParams(adminB);
		// 直接返回查询结果集即可，springmvc框架自动将结果集转换为json字符串返回给客户端
		return lstAdmins;
	}

	@RequestMapping("AjaxQueryDemoAction2")
	public ResponseEntity<List<AdminInfoBean>> ajaxQueryDemo2(AdminInfoBean adminB) {
		//ResponseEntity<List<AdminInfoBean>> re = new ResponseEntity<List<AdminInfoBean>>(null);
		// 调用service层进行查询操作
		List<AdminInfoBean> lstAdmins = loginS.queryInfoByParams(adminB);
		// 直接返回查询结果集即可，springmvc框架自动将结果集转换为json字符串返回给客户端
		return ResponseEntity.status(HttpStatus.OK).body(lstAdmins);
	}


	RESTFUL风格
	@RequestMapping(value = "/adminInfo/{adminId}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<List<AdminInfoBean>> restQueryAdminInfo_GetId(@PathVariable("adminId") Integer adminId) {
		// ResponseEntity<List<AdminInfoBean>> re = new
		// ResponseEntity<List<AdminInfoBean>>(null);
		// 调用service层进行查询操作
		List<AdminInfoBean> lstAdmins = loginS.selectByPrimaryKeyList(adminId);

		// 直接返回查询结果集即可，springmvc框架自动将结果集转换为json字符串返回给客户端
		return ResponseEntity.status(HttpStatus.OK).body(lstAdmins);
	}

	@RequestMapping(value = "/adminInfo/", method = RequestMethod.GET)
	public ResponseEntity<List<AdminInfoBean>> restQueryAdminInfo_GetAll() {
		// ResponseEntity<List<AdminInfoBean>> re = new
		// ResponseEntity<List<AdminInfoBean>>(null);
		// 调用service层进行查询操作
		List<AdminInfoBean> lstAdmins = loginS.selectAllInfos();
		// 直接返回查询结果集即可，springmvc框架自动将结果集转换为json字符串返回给客户端
		return new ResponseEntity<>(lstAdmins, HttpStatus.OK);
		// <> 语法用法，要求maven编译器使用的版本>=1.7，可以在项目右键--> project facets 修改java的版本
		// 也可以使用1.5的版本语法方式
		// return new ResponseEntity<List<AdminInfoBean>>(lstAdmins, HttpStatus.OK);

	}
=======

spring:
  @ResponseBody:将方法返回的数据直接写给浏览器，如果是对象转为json数据
	@ResponseBody是作用在方法上的，@ResponseBody 表示该方法的返回结果直接写入 HTTP response body 中，一般在异步获取数据时使用【也就是AJAX】，在使用 @RequestMapping后，返回值通常解析为跳转路径，但是加上 @ResponseBody 后返回结果不会被解析为跳转路径，而是直接写入 HTTP response body 中。 比如异步获取 json 数据，加上 @ResponseBody 后，会直接返回 json 数据。@RequestBody 将 HTTP 请求正文插入方法中，使用适合的 HttpMessageConverter 将请求体写入某个对象。
  @Component:标记为组件，加入到容器中



spring boot:
  @SpringBootApplication 来标注一个主程序类，说明这是一个Spring Boot应用

  @ConfigurationProperties(prefix = "person")：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定； prefix = "person"：配置文件中哪个下面的所有属性进行一一映射
>>>>>>> master
