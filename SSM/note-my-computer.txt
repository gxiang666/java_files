springMVC:
	-映射处理：<mvc:view-controller path="/hello" view-name="success"/>
	相当于：
	@RequestMapping({"/","/index.html"})
    public String index(){
         return "index";
    }

	-拦截处理
	<mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/hello"/>
            <bean></bean>
        </mvc:interceptor>
    </mvc:interceptors>
    <mvc:default-servlet-handler/>

    //接受来自表单数据map里面保存错误信息
    @PostMapping(value = "/user/login")
    public String login(@RequestParam("username") String username,
                        @RequestParam("password") String password,
                        Map<String,Object> map, HttpSession session){
        if(!StringUtils.isEmpty(username) && "123456".equals(password)){
            //登陆成功，防止表单重复提交，可以重定向到主页
            session.setAttribute("loginUser",username);
            return "redirect:/main.html";
        }else{
            //登陆失败

            map.put("msg","用户名密码错误");
            return  "login";
        }

    }

    解决无法访问css,js等静态文件的方法：
        (1)web.xml
            <servlet-mapping>
                <servlet-name>default</servlet-name>
                <url-pattern>*.css</url-pattern>
            </servlet-mapping>

            <servlet-mapping>
                <servlet-name>default</servlet-name>
                <url-pattern>*.js</url-pattern>
            </servlet-mapping>
            <servlet-mapping>
                <servlet-name>default</servlet-name>
                <url-pattern>*.gif</url-pattern>
            </servlet-mapping>
            <servlet-mapping>
                <servlet-name>default</servlet-name>
                <url-pattern>*.png</url-pattern>
            </servlet-mapping>
            <servlet-mapping>
                <servlet-name>default</servlet-name>
                <url-pattern>*.jpg</url-pattern>
            </servlet-mapping>
        (2):springmvc.xml
            <!-- ================访问静态资源的处理====================== -->
            <!-- location：表示静态资源所在的路径； mapping：表示静态资源的请求路径 -->
            <mvc:default-servlet-handler/>
            <mvc:resources location="/static/" mapping="/static/**"></mvc:resources>
        (3):URL绝对路径：
            <%
            String path = request.getContextPath();
            //获得本项目的地址(例如: http://localhost:8080/MyApp/)赋值给basePath变量 
            // 例如： http://localhost:8090/webservlet0721/
            String basePath = request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort()
                    + path + "/";
            //将 "项目路径basePath" 放入pageContext中，待以后用EL表达式读出。 
            session.setAttribute("basePath", basePath);
            // 跳转到登录页面
            //response.sendRedirect("login.jsp");
            request.getRequestDispatcher("login_test.jsp").forward(request, response);
            %>
            //使用绝对路径
            <script type="text/javascript" src="${basePath }static/js/jquery-1.12.4/jquery-1.12.4.min.js"></script>
